name: Terraform Plan, Apply and Deployment
description: Terraform Plan, Apply and Deployment

inputs:
  terraform_version:
    required: true
    type: string
    default: '~>1.4.5'
  working_directory:
    required: true
    type: string
    default: './UI'
  github_token:
    required: true
    type: string
  non_pr_env_name:
    required: true
    type: string
    default: 'qa'
  backend_config_resource_group_name:
    required: true
    type: string
  backend_config_storage_account_name:
    required: true
    type: string
  backend_config_container_name:
    required: true
    type: string
  tf_working_directory:
    required: true
    type: string
  tf_var_file_env:
    required: true
    type: string
  az_resource_group_name:
    required: true
    type: string
  az_webapp_name:
    required: true
    type: string
  az_tenant_id:
    required: true
    type: string
  az_subscription_id:
    required: true
    type: string
  az_client_id:
    required: true
    type: string
  az_client_secret:
    required: true
    type: string
  blob_storage_client_secret:
    required: true
    type: string
  postgresql_server_admin_username:
    required: true
    type: string
  postgresql_server_admin_password:
    required: true
    type: string
  dfeAnalytics_credential:
    required: true
    type: string
  run_database_migrations_and_import_data:
    required: true
    default: false
    type: boolean
  az_function_app_name:
    required: true
    type: string
  deploy_to_azure_function_app:
    required: true
    default: false
    type: boolean

runs:
  using: composite
  
  steps:

    - name: Azure CLI Login
      uses: ./.github/actions/azure-login
      with:
        az_tenant_id: ${{ inputs.az_tenant_id }}
        az_subscription_id: ${{ inputs.az_subscription_id }}
        az_client_id: ${{ inputs.az_client_id }}
        az_client_secret: ${{ inputs.az_client_secret }}
        
    - name: Get workflow IP address
      id: whats-my-ip
      uses: ./.github/actions/whats-my-ip-address
      with:
        is_enabled: true
        
    - name: Check Storage Account and Whitelist GitHub runner IP to the firewall
      shell: bash
      run: |
        webAppName=${{ inputs.az_webapp_name }}
        storageName=${webAppName//-/}logs
        availability=$(az storage account check-name --name $storageName --query 'nameAvailable' --output tsv)
        if [[ $availability == "false" ]]; then
          echo "Storage account $storageName exists."
          az storage account network-rule add -g ${{ inputs.az_resource_group_name }} --account-name $storageName --ip-address ${{ steps.whats-my-ip.outputs.ip }}
        else
          echo "Storage account $storageName does not exist."
        fi

    - name: Check Key Vault and Whitelist GitHub runner IP to the firewall
      shell: bash
      run: |
        # Check if Key Vault exists
        EXISTS=$(az keyvault show --name ${{ inputs.az_webapp_name }}-kv --query id --output tsv || echo "")
        if [ -z "$EXISTS" ]; then
          # Key Vault does not exist, ignore
          echo "Key Vault: ${{ inputs.az_webapp_name }}-kv does not exist"
        else
          az keyvault network-rule add --resource-group ${{ inputs.az_resource_group_name }} --name ${{ inputs.az_webapp_name }}-kv --ip-address ${{ steps.whats-my-ip.outputs.ip }}
        fi
        
    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false

    - name: 'Terraform Init'
      uses: ./.github/actions/terraform-init
      with:
        backend_config_resource_group_name: ${{ inputs.backend_config_resource_group_name }}
        backend_config_storage_account_name: ${{ inputs.backend_config_storage_account_name }}
        backend_config_container_name: ${{ inputs.backend_config_container_name }}
        tf_working_directory: ${{ inputs.tf_working_directory }}
        non_pr_env_name: ${{ inputs.non_pr_env_name }}
    
    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      shell: bash
      run: terraform -chdir=${{ inputs.tf_working_directory }} fmt -check
    
    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      shell: bash
      run: |
        export exitcode=0
        terraform -chdir=${{ inputs.tf_working_directory }} plan -var-file="vars-${{ inputs.tf_var_file_env }}.tfvars" -detailed-exitcode -no-color -out tfplan.out || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
    
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ${{ inputs.tf_working_directory }}/tfplan.out
    
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      shell: bash
      run: |
        TERRAFORM_PLAN=$(terraform -chdir=${{ inputs.tf_working_directory }} show -no-color tfplan.out)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
    
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      shell: bash
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
    
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const body = `${process.env.SUMMARY}`;
          github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
          })
      
    - name: Terraform Apply and Deployment
      uses: ./.github/actions/terraform-apply-and-deployment
      with:
          working_directory: ${{ inputs.working_directory }}
          backend_config_resource_group_name: ${{ inputs.backend_config_resource_group_name }}
          backend_config_storage_account_name: ${{ inputs.backend_config_storage_account_name }}
          backend_config_container_name: ${{ inputs.backend_config_container_name }}
          tf_working_directory: ${{ inputs.tf_working_directory }}
          az_resource_group_name: ${{ inputs.az_resource_group_name  }}
          az_webapp_name: ${{ inputs.az_webapp_name }}
          blob_storage_client_secret: ${{ inputs.blob_storage_client_secret }}
          postgresql_server_admin_username: ${{ inputs.postgresql_server_admin_username }}
          postgresql_server_admin_password: ${{ inputs.postgresql_server_admin_password }}
          non_pr_env_name: ${{ inputs.non_pr_env_name }}
          dfeAnalytics_credential: ${{ inputs.dfeAnalytics_credential }}
          run_database_migrations_and_import_data: ${{ inputs.run_database_migrations_and_import_data }}
          az_tenant_id: ${{ inputs.az_tenant_id }}
          az_subscription_id: ${{ inputs.az_subscription_id }}
          az_client_id: ${{ inputs.az_client_id }}
          az_client_secret: ${{ inputs.az_client_secret }}
          az_function_app_name: ${{ inputs.az_function_app_name }}
          deploy_to_azure_function_app: ${{ inputs.deploy_to_azure_function_app }}
        
    - name: Remove GitHub runner IP from the Storage Account firewall rule
      if: always()
      shell: bash
      run: |
        webAppName=${{ inputs.az_webapp_name }}
        storageName=${webAppName//-/}logs
        availability=$(az storage account check-name --name $storageName --query 'nameAvailable' --output tsv)
        if [[ $availability == "false" ]]; then
          echo "Storage account $storageName exists."
          az storage account network-rule remove -g ${{ inputs.az_resource_group_name  }} --account-name $storageName --ip-address ${{ steps.whats-my-ip.outputs.ip }}
        else
          echo "Storage account $storageName does not exist."
        fi

    - name: Remove GitHub runner IP from the Key Vault firewall firewall rules
      if: always()
      shell: bash
      run: |
        # Check if Key Vault exists
        EXISTS=$(az keyvault show --name ${{ inputs.az_webapp_name }}-kv --query id --output tsv || echo "")
        if [ -z "$EXISTS" ]; then
          # Key Vault does not exist, ignore
          echo "Key Vault: ${{ inputs.az_webapp_name }}-kv does not exist"
        else
          az keyvault network-rule remove --resource-group ${{ inputs.az_resource_group_name  }} --name ${{ inputs.az_webapp_name }}-kv --ip-address ${{ steps.whats-my-ip.outputs.ip }}
        fi