name: Terraform Apply and Deployment
description: Terraform Apply and Deployment

inputs:
  dotnet_version:
    required: true
    type: string
    default: '6.0.x'
  node_version:
    required: true
    type: string
    default: '16'
  working_directory:
    required: true
    type: string
    default: './UI'
  terraform_version:
    required: true
    type: string
    default: '~>1.4.5'
  backend_config_resource_group_name:
    required: true
    type: string
  backend_config_storage_account_name:
    required: true
    type: string
  backend_config_container_name:
    required: true
    type: string
  tf_working_directory:
    required: true
    type: string
  az_resource_group_name:
    required: true
    type: string
  az_webapp_name:
    required: true
    type: string
  blob_storage_client_secret:
    required: true
    type: string
  postgresql_server_admin_username:
    required: true
    type: string
  postgresql_server_admin_password:
    required: true
    type: string
  non_pr_env_name:
    required: true
    type: string
    default: 'qa'
  run_database_migrations_and_import_data:
    description: 'Run database migration and import data on the deployed app'
    required: true
    default: true
    type: boolean
  dfeAnalytics_credential:
    required: true
    type: string
  deployment_slot:
    description: 'Deployment slot name'
    required: false
    default: "staging"
    type: string
  az_tenant_id:
    required: true
    type: string
  az_subscription_id:
    required: true
    type: string
  az_client_id:
    required: true
    type: string
  az_client_secret:
    required: true
    type: string
  az_function_app_name:
    required: true
    type: string

runs:
  using: composite
  
  steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: ./.github/actions/terraform-init
      with:
        backend_config_resource_group_name: ${{ inputs.backend_config_resource_group_name }}
        backend_config_storage_account_name: ${{ inputs.backend_config_storage_account_name }}
        backend_config_container_name: ${{ inputs.backend_config_container_name }}
        tf_working_directory: ${{ inputs.tf_working_directory }}
        non_pr_env_name: ${{ inputs.non_pr_env_name }}

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ${{ inputs.tf_working_directory }}

    # Terraform Apply
    - name: Terraform Apply
      shell: bash
      run: |
        terraform -chdir=${{ inputs.tf_working_directory }} apply -auto-approve tfplan.out
        
    - name: Create a deployment slot
      shell: bash
      run: az webapp deployment slot create --resource-group ${{ inputs.az_resource_group_name }} --name ${{ inputs.az_webapp_name }} --slot ${{ inputs.deployment_slot }} --configuration-source ${{ inputs.az_webapp_name }}
        
    - name: Build and publish web app
      uses: ./.github/actions/build-and-publish-app
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        node_version: ${{ inputs.node_version }}
        working_directory: ${{ inputs.working_directory }}
        dfeAnalytics_credential: ${{ inputs.dfeAnalytics_credential }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ inputs.az_webapp_name }}
        package: ${{ inputs.working_directory }}/publish
        slot-name: ${{ inputs.deployment_slot }}
        
    - name: Create a Function App deployment slot
      shell: bash
      run: az functionapp deployment slot create --resource-group ${{ inputs.az_resource_group_name }} --name ${{ inputs.az_function_app_name }} --slot ${{ inputs.deployment_slot }} --configuration-source ${{ inputs.az_function_app_name }}
        
    - name: Deploy to Azure Function App
      uses: ./.github/actions/deploy-function-app
      with:
        az_tenant_id: ${{ inputs.az_tenant_id }}
        az_subscription_id: ${{ inputs.az_subscription_id }}
        az_client_id: ${{ inputs.az_client_id }}
        az_client_secret: ${{ inputs.az_client_secret }}
        az_resource_group_name: ${{ inputs.az_resource_group_name }}
        az_function_app_name: ${{ inputs.az_function_app_name }}
        deployment_slot: ${{ inputs.deployment_slot }}
        
    - name: Swap slots to production
      shell: bash
      run: az webapp deployment slot swap -s ${{ inputs.deployment_slot }} -n ${{ inputs.az_webapp_name }} -g ${{ inputs.az_resource_group_name }} --target-slot production
        
    - name: Run Database Migration and Data Importer
      uses: ./.github/actions/run-db-migration-and-importer
      with:
        az_resource_group_name: ${{ inputs.az_resource_group_name  }}
        az_webapp_name: ${{ inputs.az_webapp_name }}
        blob_storage_client_secret: ${{ inputs.blob_storage_client_secret }}
        postgresql_server_admin_username: ${{ inputs.postgresql_server_admin_username }}
        postgresql_server_admin_password: ${{ inputs.postgresql_server_admin_password }}
        run_database_migrations_and_import_data: ${{ inputs.run_database_migrations_and_import_data }}
        
    - name: Swap slots to Function App production
      shell: bash
      run: az functionapp deployment slot swap -s ${{ inputs.deployment_slot }} -n ${{ inputs.az_function_app_name }} -g ${{ inputs.az_resource_group_name }} --target-slot production
      
    - name: Delete non prod deployment slot
      if: always()
      shell: bash
      run: az webapp deployment slot delete --resource-group ${{ inputs.az_resource_group_name  }}  --name ${{ inputs.az_webapp_name }} --slot ${{ inputs.deployment_slot }}
      
    - name: Delete non prod Function App deployment slot
      if: always()
      shell: bash
      run: az functionapp deployment slot delete --resource-group ${{ inputs.az_resource_group_name  }}  --name ${{ inputs.az_function_app_name }} --slot ${{ inputs.deployment_slot }}