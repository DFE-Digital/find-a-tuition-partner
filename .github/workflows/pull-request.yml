name: Pull Request Deployment and End to End Testing

on:
  workflow_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

concurrency: pr-${{ github.event.number }}

env:
  PR_NUMBER: pr-${{ github.event.number }}
  BASE_URL: "https://find-a-tuition-partner-pr-${{ github.event.number }}.london.cloudapps.digital"
  CF_API: "https://api.london.cloud.service.gov.uk"
  CF_ORG: "dfe"
  CF_SPACE: ntp-qa

jobs:
  build_deploy_test:
    name: Build, Deploy and Run End to End Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Bundle web assets
      working-directory: ./UI
      run: |
        npm ci
        npm run build

    - name: Add credentials.json
      run: |
        tee Infrastructure/credentials.json << EOF
        ${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT_KEY }}
        EOF

    - name: Add DfE Analytics credentials.json
      run: |
        tee UI/dfe-analytics-credentials.json << EOF
        ${{ secrets.DFE_ANALYTICS_CREDENTIALS_JSON }}
        EOF

    - name: Install the CF CLI
      run: |
        wget -v -O cf.tar.gz "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v8"
        sudo tar xzf cf.tar.gz --wildcards --directory /usr/local/bin/ "cf*"

    - name: Authenticate
      env:
        CF_USERNAME: ${{ secrets.CF_USERNAME }}
        CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
      run: |
        echo "Logging into $CF_ORG/$CF_SPACE..."
        cf api "${CF_API}"
        cf auth
        cf target -o "${CF_ORG}" -s "${CF_SPACE}"

    - name: Create database backing service
      run: |
        cf create-service postgres small-13 find-a-tuition-partner-$PR_NUMBER-postgres-db --wait

    - name: Create Redis backing service
      run: |
        cf create-service redis tiny-6.x find-a-tuition-partner-$PR_NUMBER-redis-db --wait

    - name: Deploy to PaaS
      run: |
        cf push --strategy rolling --vars-file vars-pr.yml \
          --var environment-postfix=-$PR_NUMBER \
          --var dotnet-environment=$PR_NUMBER \
          --var tcp-sink-uri="${{ secrets.TCP_SINK_URI }}" \
          --var govuk-notify-api-key="${{ secrets.GOVUK_NOTIFY_API_KEY }}" \
          --var google-drive-shared-drive-id="${{ secrets.GOOGLE_DRIVE_SHARED_DRIVE_ID }}" \
          --var google-drive-tuition-partner-data-folder-id="${{ secrets.GOOGLE_DRIVE_TUITION_PARTNER_DATA_FOLDER_ID }}" \
          --var google-drive-tuition-partner-logo-folder-id="${{ secrets.GOOGLE_DRIVE_TUITION_PARTNER_LOGO_FOLDER_ID }}"

    - name: Run database migrations and import data
      run: |
        cf run-task find-a-tuition-partner-$PR_NUMBER \
          --command "exec /home/vcap/deps/0/dotnet_publish/UI import \
          --GoogleDrive:ServiceAccountKeyFilePath /home/vcap/deps/0/dotnet_publish/credentials.json" \
          --name find-a-tuition-partner-$PR_NUMBER-data-import
    
    - name: Logout
      run: cf logout

    - name: Wait for Action Tutoring's details page - surrogate for waiting for migration task to complete
      uses: cygnetdigital/wait_for_response@v2.0.0
      with:
        url: "${{ env.BASE_URL }}/tuition-partner/action-tutoring"
        timeout: 600000
        interval: 15000

    - name: End to End Testing
      uses: cypress-io/github-action@v5
      with:
        working-directory: ./UI
        config: baseUrl="${{ env.BASE_URL }}/",video=false

    - name: Store screenshots on test failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: UI/cypress/screenshots

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: ${{ job.status }}
        SLACK_MESSAGE: "${{ env.BASE_URL }}"
        SLACK_TITLE: PR Deployment
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}