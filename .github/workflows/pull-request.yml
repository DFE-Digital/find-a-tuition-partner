name: 'Pull Request Provision FaTP into Azure via Terraform, Deployment and End to End Testing'

on:
  workflow_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

concurrency: pr-${{ github.event.number }}


env:
  APP_CODE_PATH: './UI'
  APP_BASE_URL: ''
  AZURE_WEBAPP_NAME: 'find-a-tp-pr-${{ github.event.number }}'
  AZURE_RESOURCE_GROUP: 's177d01-ntp-pr-${{ github.event.number }}'
  TF_VERSION: '~>1.4.5'
  TF_WORKING_DIR: './terraform/azure'
  TF_STATE_KEY: 'terraform.tfstate'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_environment: pr-${{ github.event.number }}
  TF_VAR_postgresql_server_admin_username: ${{ secrets.POSTGRESQL_SERVER_ADMIN_USERNAME }}
  TF_VAR_postgresql_server_admin_password: ${{ secrets.POSTGRESQL_SERVER_ADMIN_PASSWORD }}
  TF_VAR_monitor_email_receivers: ${{ secrets.MONITOR_EMAIL_RECEIVERS }}
  TF_VAR_govuk_notify_apikey: ${{ secrets.GOVUK_NOTIFY_APIKEY }}
  TF_VAR_blob_storage_client_secret: ${{ secrets.BLOB_STORAGE_CLIENT_SECRET }}

jobs:    
  terraform-plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    environment: 'development'
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:     
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          az_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.ARM_CLIENT_ID }}
          az_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
        
      - name: Get workflow IP address
        id: whats-my-ip
        uses: ./.github/actions/whats-my-ip-address
        with:
          is_enabled: true
          
      - name: Check Storage Account Network Rules
        id: check_network_rules
        run: |
            RULES=$(az storage account network-rule list --account-name findatppr${{ github.event.number }}logs --query '[*].{IP: ipAddressOrRange}' --output json | jq -r '.[] | .IP')
            if [[ -z "$RULES" ]]; then
            echo "No network rules found for the specified storage account"
            echo "::set-output name=rules_status::failure"
            else
            echo "Network rules found: $RULES"
            echo "::set-output name=rules_status::success"
            fi
          
      - name: Add Storage Account Network rules
        run: |
          if [[ "${{ steps.check_network_rules.outputs.rules_status }}" == "failure" ]]; then
            echo "Got failure but continue."
          else
            az storage account network-rule add -g s177d01-ntp-pr-${{ github.event.number }} --account-name findatppr${{ github.event.number }}logs --ip-address ${{ steps.whats-my-ip.outputs.ip }}
          fi
        
      - name: Terraform Plan
        id: tf-plan
        uses: ./.github/actions/terraform-plan
        with:
          terraform_version: ${{ env.TF_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          backend_config_resource_group_name: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
          backend_config_storage_account_name: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
          backend_config_container_name: ${{ secrets.TF_STATE_CONTAINER_NAME }}
          tf_working_directory: ${{ env.TF_WORKING_DIR }}
          tf_var_file_env: 'pr'
  
  terraform-apply:
    name: 'Terraform Apply, Deployment and End to End Testing'
    runs-on: ubuntu-latest
    environment: 'development'
    needs: [terraform-plan]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Get workflow IP address
        id: whats-my-ip
        uses: ./.github/actions/whats-my-ip-address
        
      - name: Terraform Apply and Deployment
        uses: ./.github/actions/terraform-apply-and-deployment
        with:
          working_directory: ${{ env.APP_CODE_PATH }}
          az_tenant_id: ${{ env.ARM_TENANT_ID }}
          az_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          az_client_id: ${{ env.ARM_CLIENT_ID }}
          az_client_secret: ${{ env.ARM_CLIENT_SECRET }}
          backend_config_resource_group_name: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
          backend_config_storage_account_name: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
          backend_config_container_name: ${{ secrets.TF_STATE_CONTAINER_NAME }}
          tf_working_directory: ${{ env.TF_WORKING_DIR }}
          az_resource_group_name: ${{ env.AZURE_RESOURCE_GROUP  }}
          az_webapp_name: ${{ env.AZURE_WEBAPP_NAME }}
          blob_storage_client_secret: ${{ env.TF_VAR_blob_storage_client_secret }}
          postgresql_server_admin_username: ${{ env.TF_VAR_postgresql_server_admin_username }}
          postgresql_server_admin_password: ${{ env.TF_VAR_postgresql_server_admin_password }}
          
      - name: Remove Storage Account Network rules
        run: |
          az storage account network-rule remove -g s177d01-ntp-pr-${{ github.event.number }} --account-name findatppr${{ github.event.number }}logs --ip-address ${{ steps.whats-my-ip.outputs.ip }}
            
      - name: End to End Testing
        uses: ./.github/actions/end-to-end-testing
        with:
          az_resource_group_name: ${{ env.AZURE_RESOURCE_GROUP  }}
          az_webapp_name: ${{ env.AZURE_WEBAPP_NAME }}
          az_tenant_id: ${{ env.ARM_TENANT_ID }}
          az_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          az_client_id: ${{ env.ARM_CLIENT_ID }}
          az_client_secret: ${{ env.ARM_CLIENT_SECRET }}
              