name: Deploy to Azure

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      run_database_migrations_and_import_data:
        required: true
        type: boolean
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for the deployment'
        required: true
        default: qa
        type: choice
        options:
          - qa
          - research
          - staging
          - production
      run_database_migrations_and_import_data:
        description: 'Run database migrations and import data'
        required: true
        default: false
        type: boolean
        
env:
  deployment_slot: "staging"

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency: azure-deploy-${{ inputs.environment }}

    env:
      WORKING_DIR: './UI'

    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          az_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.ARM_CLIENT_ID }}
          az_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Build and publish web app
        uses: ./.github/actions/build-and-publish-app
        with:
          working_directory: ${{ env.WORKING_DIR }}
          dfeAnalytics_credential: ${{ secrets.DFE_ANALYTICS_CREDENTIALS_JSON }}
          
      - name: Create a deployment slot
        shell: bash
        run: az webapp deployment slot create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_WEBAPP_NAME }} --slot ${{ env.deployment_slot }}

      - name: Copy production deployment slot configuration to the target deployment slot
        shell: bash
        run: |
          # Get production slot configuration
          settings=""
          prod_config=$(az webapp config appsettings list --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "[].{name:name, value:value}" --output tsv)
          # Construct settings string
          while IFS=$'\t' read -r name value
          do
            echo "::add-mask::$value"
            settings+="$name=$value "
          done < <(echo "$prod_config")

          # Set deployment slot configuration
          az webapp config appsettings set --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --slot ${{ env.deployment_slot }} --settings $settings

      - name: Copy production deployment slot generic configurations to the target deployment slot
        shell: bash
        run: |
         # Get production slot settings
         PROD_HEALTH_CHECK=$(az webapp config show --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query healthCheckPath --output tsv)
         PROD_WORKER_COUNT=$(az webapp config show --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query numberOfWorkers --output tsv)
         
         # Set deployment slot settings
         az webapp config set -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets.AZURE_WEBAPP_NAME }} --generic-configurations "{\"healthCheckPath\": \"$PROD_HEALTH_CHECK\", \"numberOfWorkers\": \"$PROD_WORKER_COUNT\", \"ftpsState\": \"Disabled\"}" --slot ${{ env.deployment_slot }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: ${{ env.WORKING_DIR }}/publish
          slot-name: ${{ env.deployment_slot }}

      - name: Run Database Migration and Data Importer
        uses: ./.github/actions/run-db-migration-and-importer
        with:
          az_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP  }}
          az_webapp_name: ${{ secrets.AZURE_WEBAPP_NAME }}
          blob_storage_client_secret: ${{ secrets.BLOB_STORAGE_CLIENT_SECRET }}
          postgresql_server_admin_username: ${{ secrets.POSTGRESQL_SERVER_ADMIN_USERNAME }}
          postgresql_server_admin_password: ${{ secrets.POSTGRESQL_SERVER_ADMIN_PASSWORD }}
          run_database_migrations_and_import_data: ${{ inputs.run_database_migrations_and_import_data }} 
          
      - name: Swap slots to production
        shell: bash
        run: az webapp deployment slot swap -s ${{ env.deployment_slot }} -n ${{ secrets.AZURE_WEBAPP_NAME }} -g ${{ secrets.AZURE_RESOURCE_GROUP }} --target-slot production
        
      - name: Delete non prod deployment slot
        if: always()
        shell: bash
        run: az webapp deployment slot delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP  }}  --name ${{ secrets.AZURE_WEBAPP_NAME }} --slot ${{ env.deployment_slot }}