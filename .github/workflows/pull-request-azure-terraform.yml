name: 'Provision FaTP into Azure via Terraform on Pull Request'

on:
  workflow_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

concurrency: pr-${{ github.event.number }}


env:
  DOTNET_VERSION: '6.0.x'
  APP_CODE_PATH: './UI'
  AZURE_WEBAPP_NAME: 'find-a-tp-pr-353' # hard coding this for now
  RESOURCE_GROUP: 's177d01-ntp-pr-353' # hard coding this for now
  TF_VERSION: '~>1.4.5'
  TF_VAR_ENVIRONMENT: pr-${{ github.event.number }}
  TF_ACTION_WORKING_DIR: './terraform/azure'
  TF_STATE_KEY: 'terraform.tfstate'
  TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
  TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
  TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
  TF_VAR_postgresql_server_admin_username: ${{ secrets.POSTGRESQL_SERVER_ADMIN_USERNAME }}
  TF_VAR_postgresql_server_admin_password: ${{ secrets.POSTGRESQL_SERVER_ADMIN_PASSWORD }}
  TF_VAR_monitor_email_receivers: ${{ secrets.MONITOR_EMAIL_RECEIVERS }}
  TF_VAR_govuk_notify_apikey: ${{ secrets.GOVUK_NOTIFY_APIKEY }}
  TF_VAR_blob_storage_client_secret: ${{ secrets.BLOB_STORAGE_CLIENT_SECRET }}

jobs:    
  terraform-plan:
    name: 'Provision FaTP into Azure via Terraform plan'
    runs-on: ubuntu-latest
    environment: 'development'
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_ACTION_WORKING_DIR }}

    steps:
      - name: 'Log into Azure'
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ env.TF_VAR_client_id }}","clientSecret":"${{ env.TF_VAR_client_secret }}","subscriptionId":"${{ env.TF_VAR_subscription_id }}","tenantId":"${{ env.TF_VAR_tenant_id }}"}'   
          
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      
      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 'Set TF State Key'
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "TF_STATE_KEY=pr-${{ github.event.pull_request.number }}-terraform.tfstate" >> $GITHUB_ENV
          else
            echo "TF_STATE_KEY=dev-terraform.tfstate" >> $GITHUB_ENV
          fi

      - name: 'Terraform Init'
        run: |
          export ARM_CLIENT_ID=${{ env.TF_VAR_client_id }}
          export ARM_CLIENT_SECRET=${{ env.TF_VAR_client_secret }}
          export ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}
          export ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}

          terraform init -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"  \
                         -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}"  \
                         -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}"  \
                         -backend-config="key=${{ env.TF_ACTION_WORKING_DIR }}/${{ env.TF_STATE_KEY }}" 
      
      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check
      
      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          export ARM_CLIENT_ID=${{ env.TF_VAR_client_id }}
          export ARM_CLIENT_SECRET=${{ env.TF_VAR_client_secret }}
          export ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}
          export ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}
          terraform plan -var-file="vars-pr.tfvars" -var="postgresql_server_admin_username=${TF_VAR_postgresql_server_admin_username}" \
                            -var="postgresql_server_admin_password=${TF_VAR_postgresql_server_admin_password}" \
                            -var="environment=${TF_VAR_ENVIRONMENT}" \
                            -var="govuk_notify_apikey=${TF_VAR_govuk_notify_apikey}" \
                            -var="blob_storage_client_secret=${TF_VAR_blob_storage_client_secret}" \
                            -var="monitor_email_receivers=${TF_VAR_monitor_email_receivers}"  -detailed-exitcode -no-color -out tfplan.out || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
      
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TF_ACTION_WORKING_DIR }}/tfplan.out
      
      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan.out)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
      
      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
  
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: 'development'
    needs: [terraform-plan]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_ACTION_WORKING_DIR }}
    
    steps:
      - name: 'Log into Azure'
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ env.TF_VAR_client_id }}","clientSecret":"${{ env.TF_VAR_client_secret }}","subscriptionId":"${{ env.TF_VAR_subscription_id }}","tenantId":"${{ env.TF_VAR_tenant_id }}"}'
          
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
          
     # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
     # Run dotnet build and publish
      - name: .NET Build and Publish
        working-directory: ${{ env.APP_CODE_PATH }}
        run: |
            dotnet build --configuration Release
            dotnet publish -c Release -o './publish'
      
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          export ARM_CLIENT_ID=${{ env.TF_VAR_client_id }}
          export ARM_CLIENT_SECRET=${{ env.TF_VAR_client_secret }}
          export ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}
          export ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}

          terraform init -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"  \
                         -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}"  \
                         -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}"  \
                         -backend-config="key=${{ env.TF_ACTION_WORKING_DIR }}/${{ env.TF_STATE_KEY }}" 
      
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TF_ACTION_WORKING_DIR }}
      
      # Terraform Apply
      - name: Terraform Apply
        run: |
          export ARM_CLIENT_ID=${{ env.TF_VAR_client_id }}
          export ARM_CLIENT_SECRET=${{ env.TF_VAR_client_secret }}
          export ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}
          export ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}
          terraform apply -auto-approve tfplan.out
          
          
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
              app-name: ${{ env.AZURE_WEBAPP_NAME }}
              publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
              package: ${{ env.APP_CODE_PATH }}/publish
              
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          sudo apt-get install -y sshpass
          
      - name: Run database migrations and import data
        run: |
          # clean up any old ssh tunnels before we start
          for p in $(pgrep -f "webapp create-remote-connection"); do kill $p; done
          
          az webapp create-remote-connection --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}  -p 54321 &
          # startup time seems to be a bit unpredictable...
          timeout 600 bash -c 'until echo > /dev/tcp/localhost/54321; do sleep 5; done'
          
          sshpass -p 'Docker!' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -p 54321 root@localhost '
          export BlobStorage_ClientId=fdd09510-77b0-419f-b67c-2b5a25a073f0
          export BlobStorage_AccountName=s177p01sharedtpdata
          export BlobStorage_ContainerName=ntp-tp-data
          export BlobStorage_TenantId=9c7d9dd3-840c-4b3f-818e-552865082e16
          export BlobStorage_ClientSecret=${{ env.TF_VAR_blob_storage_client_secret }}
          cd /home/site/wwwroot
          echo $BlobStorage_ClientId    # Echo the variable to confirm it's set correctly
          dotnet ./UI.dll import
          '
  
          # clean up ssh tunnel(s)
          for p in $(pgrep -f "webapp create-remote-connection"); do kill $p; done
          
              