name: 'Provision FaTP into Azure via Terraform, Deployment and End to End Testing'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        default: 'development'
      working_directory:
        required: false
        type: string
        default: './UI'
      terraform_version:
        required: false
        type: string
        default: '~>1.4.5'
      tf_working_directory:
        required: false
        type: string
        default: './terraform/azure'
      tf_var_file_env:
        required: true
        type: string
        default: 'pr'
      tf_var_environment:
        required: true
        type: string
      virtual_network_address_space:
        required: true
        type: string
        default: '10.0.0.0/16'
      az_webapp_name:
        required: true
        type: string
    secrets:
      az_resource_group_name:
        required: true
      az_tenant_id:
        required: true
      az_subscription_id:
        required: true
      az_client_id:
        required: true
      az_client_secret:
        required: true
      blob_storage_client_secret:
        required: true
      postgresql_server_admin_username:
        required: true
      postgresql_server_admin_password:
        required: true
      govuk_notify_apikey:
        required: true
      backend_config_resource_group_name:
        required: true
      backend_config_storage_account_name:
        required: true
      backend_config_container_name:
        required: true

jobs:
  terraform-plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set Environment Variables
        run: |
            echo "ARM_CLIENT_ID=${{ secrets.az_client_id }}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{ secrets.az_client_secret }}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{ secrets.az_tenant_id }}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.az_subscription_id }}" >> $GITHUB_ENV
            echo "TF_VAR_environment=${{ inputs.tf_var_environment }}" >> $GITHUB_ENV
            echo "TF_VAR_postgresql_server_admin_username=${{ secrets.postgresql_server_admin_username }}" >> $GITHUB_ENV
            echo "TF_VAR_postgresql_server_admin_password=${{ secrets.postgresql_server_admin_password }}" >> $GITHUB_ENV
            echo "TF_VAR_govuk_notify_apikey=${{ secrets.govuk_notify_apikey }}" >> $GITHUB_ENV
            echo "TF_VAR_blob_storage_client_secret=${{ secrets.blob_storage_client_secret }}" >> $GITHUB_ENV
            echo "TF_VAR_virtual_network_address_space=${{ inputs.virtual_network_address_space }}" >> $GITHUB_ENV
          
      - name: Terraform Plan
        id: tf-plan
        uses: ./.github/actions/terraform-plan
        with:
          terraform_version: ${{ inputs.terraform_version }}
          az_tenant_id: ${{ secrets.az_tenant_id  }}
          az_subscription_id: ${{ secrets.az_subscription_id }}
          az_client_id: ${{ secrets.az_client_id }}
          az_client_secret: ${{ secrets.az_client_secret }}
          az_resource_group_name: ${{ secrets.az_resource_group_name  }}
          az_webapp_name: ${{ inputs.az_webapp_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          backend_config_resource_group_name: ${{ secrets.backend_config_resource_group_name }}
          backend_config_storage_account_name: ${{ secrets.backend_config_storage_account_name }}
          backend_config_container_name: ${{ secrets.backend_config_container_name }}
          tf_working_directory: ${{ inputs.tf_working_directory }}
          tf_var_file_env: ${{ inputs.tf_var_file_env }}
  
  
  terraform-apply:
    name: 'Terraform Apply and Deployment'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [terraform-plan]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set Environment Variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.az_client_id }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.az_client_secret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.az_tenant_id }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.az_subscription_id }}" >> $GITHUB_ENV
          echo "TF_VAR_environment=${{ inputs.tf_var_environment }}" >> $GITHUB_ENV
          echo "TF_VAR_postgresql_server_admin_username=${{ secrets.postgresql_server_admin_username }}" >> $GITHUB_ENV
          echo "TF_VAR_postgresql_server_admin_password=${{ secrets.postgresql_server_admin_password }}" >> $GITHUB_ENV
          echo "TF_VAR_govuk_notify_apikey=${{ secrets.govuk_notify_apikey }}" >> $GITHUB_ENV
          echo "TF_VAR_blob_storage_client_secret=${{ secrets.blob_storage_client_secret }}" >> $GITHUB_ENV
          echo "TF_VAR_virtual_network_address_space=${{ inputs.virtual_network_address_space }}" >> $GITHUB_ENV

      - name: Terraform Apply and Deployment
        uses: ./.github/actions/terraform-apply-and-deployment
        with:
          working_directory: ${{ inputs.working_directory }}
          az_tenant_id: ${{ secrets.az_tenant_id }}
          az_subscription_id: ${{ secrets.az_subscription_id }}
          az_client_id: ${{ secrets.az_client_id }}
          az_client_secret: ${{ secrets.az_client_secret }}
          backend_config_resource_group_name: ${{ secrets.backend_config_resource_group_name }}
          backend_config_storage_account_name: ${{ secrets.backend_config_storage_account_name }}
          backend_config_container_name: ${{ secrets.backend_config_container_name }}
          tf_working_directory: ${{ inputs.tf_working_directory }}
          az_resource_group_name: ${{ secrets.az_resource_group_name  }}
          az_webapp_name: ${{ inputs.az_webapp_name }}
          blob_storage_client_secret: ${{ secrets.blob_storage_client_secret }}
          postgresql_server_admin_username: ${{ secrets.postgresql_server_admin_username }}
          postgresql_server_admin_password: ${{ secrets.postgresql_server_admin_password }}
  
  e2e-tests:
    name: 'End to End Testing'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [ 1, 2, 3]
    environment: ${{ inputs.environment }}
    needs: [ terraform-apply ]
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set Environment Variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.az_client_id }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.az_client_secret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.az_tenant_id }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.az_subscription_id }}" >> $GITHUB_ENV
          echo "TF_VAR_environment=${{ inputs.tf_var_environment }}" >> $GITHUB_ENV
          echo "TF_VAR_postgresql_server_admin_username=${{ secrets.postgresql_server_admin_username }}" >> $GITHUB_ENV
          echo "TF_VAR_postgresql_server_admin_password=${{ secrets.postgresql_server_admin_password }}" >> $GITHUB_ENV
          echo "TF_VAR_govuk_notify_apikey=${{ secrets.govuk_notify_apikey }}" >> $GITHUB_ENV
          echo "TF_VAR_blob_storage_client_secret=${{ secrets.blob_storage_client_secret }}" >> $GITHUB_ENV
          echo "TF_VAR_virtual_network_address_space=${{ inputs.virtual_network_address_space }}" >> $GITHUB_ENV

      - name: End to End Testing
        uses: ./.github/actions/end-to-end-testing
        with:
          az_resource_group_name: ${{ secrets.az_resource_group_name  }}
          az_webapp_name: ${{ inputs.az_webapp_name }}
          az_tenant_id: ${{ secrets.az_tenant_id }}
          az_subscription_id: ${{ secrets.az_subscription_id }}
          az_client_id: ${{ secrets.az_client_id }}
          az_client_secret: ${{ secrets.az_client_secret }}
        env:
          SPLIT: ${{ strategy.job-total }}
          SPLIT_INDEX: ${{ strategy.job-index }}
              