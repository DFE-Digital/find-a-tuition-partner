name: 'Provision FaTP into Azure via Terraform, Deployment and End to End Testing'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        default: 'qa'
      working_directory:
        required: false
        type: string
        default: './UI'
      terraform_version:
        required: false
        type: string
        default: '~>1.4.5'
      tf_working_directory:
        required: false
        type: string
        default: './terraform/azure'
      tf_var_file_env:
        required: true
        type: string
        default: 'pr'
      tf_var_environment:
        required: true
        type: string
      az_webapp_name:
        required: true
        type: string
      non_pr_env_name:
        required: true
        type: string
        default: 'qa'
      post_slack_notification:
        required: true
        default: false
        type: boolean
      monitor_email_receivers:
        required: true
        type: string
    secrets:
      az_resource_group_name:
        required: true
      az_tenant_id:
        required: true
      az_subscription_id:
        required: true
      az_client_id:
        required: true
      az_client_secret:
        required: true
      blob_storage_client_secret:
        required: true
      postgresql_server_admin_username:
        required: true
      postgresql_server_admin_password:
        required: true
      govuk_notify_apikey:
        required: true
      backend_config_resource_group_name:
        required: true
      backend_config_storage_account_name:
        required: true
      backend_config_container_name:
        required: true
      monitor_slack_webhook_receiver:
        required: true
#      monitor_email_receivers:
#        required: true

env:
  ARM_CLIENT_ID: ${{ secrets.az_client_id }}
  ARM_CLIENT_SECRET: ${{ secrets.az_client_secret }}
  ARM_TENANT_ID: ${{ secrets.az_tenant_id }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.az_subscription_id }}
  TF_VAR_environment: ${{ inputs.tf_var_environment }}
  TF_VAR_postgresql_server_admin_username: ${{ secrets.postgresql_server_admin_username }}
  TF_VAR_postgresql_server_admin_password: ${{ secrets.postgresql_server_admin_password }}
  TF_VAR_govuk_notify_apikey: ${{ secrets.govuk_notify_apikey }}
  TF_VAR_blob_storage_client_secret: ${{ secrets.blob_storage_client_secret }}
  TF_VAR_monitor_slack_webhook_receiver: $ {{ secrets.monitor_slack_webhook_receiver }}
  TF_VAR_monitor_email_receivers: $ {{ inputs.monitor_email_receivers }}

jobs:
  terraform-plan-apply-and-deployment:
    name: 'Terraform Plan, Apply and Deployment'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Terraform Plan, Apply and Deployment
        id: tf-plan
        uses: ./.github/actions/terraform-plan-apply-and-deployment
        with:
          terraform_version: ${{ inputs.terraform_version }}
          az_tenant_id: ${{ secrets.az_tenant_id  }}
          az_subscription_id: ${{ secrets.az_subscription_id }}
          az_client_id: ${{ secrets.az_client_id }}
          az_client_secret: ${{ secrets.az_client_secret }}
          az_resource_group_name: ${{ secrets.az_resource_group_name  }}
          az_webapp_name: ${{ inputs.az_webapp_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          backend_config_resource_group_name: ${{ secrets.backend_config_resource_group_name }}
          backend_config_storage_account_name: ${{ secrets.backend_config_storage_account_name }}
          backend_config_container_name: ${{ secrets.backend_config_container_name }}
          tf_working_directory: ${{ inputs.tf_working_directory }}
          tf_var_file_env: ${{ inputs.tf_var_file_env }}
          blob_storage_client_secret: ${{ secrets.blob_storage_client_secret }}
          postgresql_server_admin_username: ${{ secrets.postgresql_server_admin_username }}
          postgresql_server_admin_password: ${{ secrets.postgresql_server_admin_password }}
          non_pr_env_name: ${{ inputs.non_pr_env_name }}
  
  e2e-tests:
    name: 'End to End Testing'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [ 1, 2, 3]
    environment: ${{ inputs.environment }}
    needs: [ terraform-plan-apply-and-deployment ]
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: End to End Testing
        uses: ./.github/actions/end-to-end-testing
        with:
          az_resource_group_name: ${{ secrets.az_resource_group_name  }}
          az_webapp_name: ${{ inputs.az_webapp_name }}
          az_tenant_id: ${{ secrets.az_tenant_id }}
          az_subscription_id: ${{ secrets.az_subscription_id }}
          az_client_id: ${{ secrets.az_client_id }}
          az_client_secret: ${{ secrets.az_client_secret }}
          post_slack_notification: ${{ inputs.post_slack_notification }}
        env:
          SPLIT: ${{ strategy.job-total }}
          SPLIT_INDEX: ${{ strategy.job-index }}
              