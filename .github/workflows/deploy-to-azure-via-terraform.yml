name: 'Provision FaTP into Azure via Terraform, Deployment and End to End Testing'

on:
  push:
    branches:
      - main

# Ideally, we will configure this workflow to trigger on per environment basis such as qa, staging etc. 
# For testing purposes, we will trigger this a on a push to a test branch

concurrency: azure-deploy-to-dev-via-terraform

jobs:
  provision-deploy-run-e2e-test:
    name: 'Provision FaTP into Azure via Terraform, Deployment and End to End Testing'
    uses: ./.github/workflows/provision-deploy-run-e2e-test.yml
    with:
      environment: 'qa'
      tf_var_environment: 'qa'
      tf_var_file_env: 'qa'
      virtual_network_address_space: '172.0.0.0/16'
      az_webapp_name: 'find-a-tp-qa'
      post_slack_notification: false
    
    secrets:
      az_webapp_name: ${{ secrets.AZURE_WEBAPP_NAME }}
      az_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP }}
      az_tenant_id: ${{ secrets.ARM_TENANT_ID }}
      az_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      az_client_id: ${{ secrets.ARM_CLIENT_ID }}
      az_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      postgresql_server_admin_username: ${{ secrets.POSTGRESQL_SERVER_ADMIN_USERNAME }}
      postgresql_server_admin_password: ${{ secrets.POSTGRESQL_SERVER_ADMIN_PASSWORD }}
      govuk_notify_apikey: ${{ secrets.GOVUK_NOTIFY_API_KEY }}
      blob_storage_client_secret: ${{ secrets.BLOB_STORAGE_CLIENT_SECRET }}
      backend_config_resource_group_name: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
      backend_config_storage_account_name: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
      backend_config_container_name: ${{ secrets.TF_STATE_CONTAINER_NAME }}
      monitor_slack_webhook_receiver: ${{ secrets.SLACK_WEBHOOK_NON_PROD_ENV }}
      monitor_email_receivers: ${{ secrets.MONITOR_EMAIL_RECEIVERS }}
              