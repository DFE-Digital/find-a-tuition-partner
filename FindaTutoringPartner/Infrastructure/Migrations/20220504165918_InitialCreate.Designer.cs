// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(NtpDbContext))]
    [Migration("20220504165918_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .HasColumnType("text");

                    b.Property<string>("Line3")
                        .HasColumnType("text");

                    b.Property<string>("Line4")
                        .HasColumnType("text");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Postcode");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary - Literacy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Primary - Numeracy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Primary - Science"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Secondary - English"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Secondary - Humanities"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Secondary - Maths"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Secondary - Modern Foreign Languages"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Secondary - Science"
                        });
                });

            modelBuilder.Entity("Domain.TuitionPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("TuitionPartners");
                });

            modelBuilder.Entity("Domain.TuitionPartnerLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CoverageRadius")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TuitionPartnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TuitionPartnerId");

                    b.ToTable("TuitionPartnerLocations");
                });

            modelBuilder.Entity("Domain.TutorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TutorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Qualified Teachers"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Professional Tutors"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SEN Specialists"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Higher Level Teaching Assistants"
                        },
                        new
                        {
                            Id = 5,
                            Name = "University Students"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Volunteer tutors"
                        },
                        new
                        {
                            Id = 7,
                            Name = "No preference"
                        });
                });

            modelBuilder.Entity("Domain.UserSearch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SearchJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserSessionId");

                    b.ToTable("UserSearches");
                });

            modelBuilder.Entity("Domain.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("SubjectTuitionPartnerLocation", b =>
                {
                    b.Property<int>("SubjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("TuitionPartnerLocationsId")
                        .HasColumnType("integer");

                    b.HasKey("SubjectsId", "TuitionPartnerLocationsId");

                    b.HasIndex("TuitionPartnerLocationsId");

                    b.ToTable("SubjectTuitionPartnerLocation");
                });

            modelBuilder.Entity("TuitionPartnerLocationTutorType", b =>
                {
                    b.Property<int>("TuitionPartnerLocationsId")
                        .HasColumnType("integer");

                    b.Property<int>("TutorTypesId")
                        .HasColumnType("integer");

                    b.HasKey("TuitionPartnerLocationsId", "TutorTypesId");

                    b.HasIndex("TutorTypesId");

                    b.ToTable("TuitionPartnerLocationTutorType");
                });

            modelBuilder.Entity("Domain.TuitionPartnerLocation", b =>
                {
                    b.HasOne("Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TuitionPartner", "TuitionPartner")
                        .WithMany("Locations")
                        .HasForeignKey("TuitionPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("TuitionPartner");
                });

            modelBuilder.Entity("Domain.UserSearch", b =>
                {
                    b.HasOne("Domain.UserSession", null)
                        .WithMany("Searches")
                        .HasForeignKey("UserSessionId");
                });

            modelBuilder.Entity("SubjectTuitionPartnerLocation", b =>
                {
                    b.HasOne("Domain.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TuitionPartnerLocation", null)
                        .WithMany()
                        .HasForeignKey("TuitionPartnerLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TuitionPartnerLocationTutorType", b =>
                {
                    b.HasOne("Domain.TuitionPartnerLocation", null)
                        .WithMany()
                        .HasForeignKey("TuitionPartnerLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TutorType", null)
                        .WithMany()
                        .HasForeignKey("TutorTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TuitionPartner", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.UserSession", b =>
                {
                    b.Navigation("Searches");
                });
#pragma warning restore 612, 618
        }
    }
}
